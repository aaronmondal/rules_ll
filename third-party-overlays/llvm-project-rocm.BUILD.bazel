"Build file for llvm-project-rocm."

load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@rules_ll//ll:defs.bzl", "ll_binary", "ll_library")
load("@rules_ll//third-party-overlays:defs.bzl", "opencl_bitcode_library", "opencl_pch")

bool_flag(
    name = "shared_amd_comgr",
    build_setting_default = False,
)

config_setting(
    name = "shared",
    flag_values = {":shared_amd_comgr": "true"},
)

expand_template(
    name = "amd_comgr_h_gen",
    out = "amd/comgr/amd_comgr/amd_comgr.h",
    substitutions = {
        "@amd_comgr_VERSION_MAJOR@": "2",
        "@amd_comgr_VERSION_MINOR@": "7",
        "@amd_comgr_NAME@": "amd_comgr",
    },
    template = "amd/comgr/include/amd_comgr.h.in",
)

# Can't use ll_binary for now, as our transitions break.
cc_binary(
    name = "bc2h",
    srcs = ["lib/comgr/bc2h.c"],
)

AMD_DEVICE_LIBS_TARGETS = [
    "oclc_abi_version_400",
    "oclc_abi_version_500",
    "oclc_correctly_rounded_sqrt_off",
    "oclc_correctly_rounded_sqrt_on",
    "oclc_daz_opt_off",
    "oclc_daz_opt_on",
    "oclc_finite_only_off",
    "oclc_finite_only_on",
    "oclc_isa_version_1010",
    "oclc_isa_version_1011",
    "oclc_isa_version_1012",
    "oclc_isa_version_1013",
    "oclc_isa_version_1030",
    "oclc_isa_version_1031",
    "oclc_isa_version_1032",
    "oclc_isa_version_1033",
    "oclc_isa_version_1034",
    "oclc_isa_version_1035",
    "oclc_isa_version_1036",
    "oclc_isa_version_1100",
    "oclc_isa_version_1101",
    "oclc_isa_version_1102",
    "oclc_isa_version_1103",
    "oclc_isa_version_600",
    "oclc_isa_version_601",
    "oclc_isa_version_602",
    "oclc_isa_version_700",
    "oclc_isa_version_701",
    "oclc_isa_version_702",
    "oclc_isa_version_703",
    "oclc_isa_version_704",
    "oclc_isa_version_705",
    "oclc_isa_version_801",
    "oclc_isa_version_802",
    "oclc_isa_version_803",
    "oclc_isa_version_805",
    "oclc_isa_version_810",
    "oclc_isa_version_900",
    "oclc_isa_version_902",
    "oclc_isa_version_904",
    "oclc_isa_version_906",
    "oclc_isa_version_908",
    "oclc_isa_version_909",
    "oclc_isa_version_90a",
    "oclc_isa_version_90c",
    "oclc_isa_version_940",
    "oclc_unsafe_math_off",
    "oclc_unsafe_math_on",
    "oclc_wavefrontsize64_off",
    "oclc_wavefrontsize64_on",
    "ocml",
    "ockl",
    "opencl",
    "hip",
    "asanrtl",
]

# TODO: It is unfortunate that we can't really build these in parallel with the
# current build files. The rocm-device-libs block this target.
genrule(
    name = "device_lib_headers_gen",
    srcs = [":rocm-device-libs"],
    tools = [":bc2h"],
    cmd = """
for f in $(SRCS)
do
    base=$$(basename $$f)
    without_extension=$${base%.*}
    $(location :bc2h) $$f $(RULEDIR)/amd/comgr/internal/$${without_extension}.inc "$${without_extension}_lib"
done
    """,
    outs = [
        "amd/comgr/internal/{}.inc".format(name)
        for name in AMD_DEVICE_LIBS_TARGETS
    ],
)

genrule(
    name = "libraries_inc_gen",
    srcs = [":device_lib_headers_gen"],
    cmd = """
for f in $(SRCS)
do
    echo '#include "'"$$(basename $$f)"'"'  >> $(OUTS)
done
    """,
    outs = ["amd/comgr/internal/libraries.inc"],
)

genrule(
    name = "libraries_defs_inc_gen",
    srcs = [":device_lib_headers_gen"],
    cmd = """
cat <<EOF >> $(OUTS)
#ifndef AMD_DEVICE_LIBS_TARGET
#define AMD_DEVICE_LIBS_TARGET(t)
#endif
#ifndef AMD_DEVICE_LIBS_GFXIP
#define AMD_DEVICE_LIBS_GFXIP(t, g)
#endif
#ifndef AMD_DEVICE_LIBS_FUNCTION
#define AMD_DEVICE_LIBS_FUNCTION(t, f)
#endif

EOF

for f in $(SRCS)
do
    base=$$(basename $$f)
    without_extension=$${base%.*}
    echo "AMD_DEVICE_LIBS_TARGET("$$without_extension")" >> $(OUTS)

    if [[ $$without_extension == oclc_isa_version_* ]]
    then
        isa_version=$${without_extension##oclc_isa_version_}
        echo 'AMD_DEVICE_LIBS_GFXIP('$$without_extension', "'$$isa_version'")' >> $(OUTS)
    fi

    if [[ $$without_extension == oclc_*_on ]]
    then
        cut_oclc_prefix=$${without_extension##oclc_}
        cut_on_suffix=$${cut_oclc_prefix%_on}
        echo "AMD_DEVICE_LIBS_FUNCTION("$$without_extension", "$$cut_on_suffix")" >> $(OUTS)
    fi

done

cat <<EOF >> $(OUTS)

#undef AMD_DEVICE_LIBS_TARGET
#undef AMD_DEVICE_LIBS_GFXIP
#undef AMD_DEVICE_LIBS_FUNCTION
EOF
    """,
    outs = ["amd/comgr/internal/libraries_defs.inc"],
)

opencl_pch(
    name = "opencl_1_2_pch_gen",
    cl_std = "1.2",
)

genrule(
    name = "opencl_1_2_inc_gen",
    tools = [":bc2h"],
    srcs = [":opencl_1_2_pch_gen"],
    cmd = "$(location :bc2h) $(SRCS) $(OUTS) opencl1_2_c",
    outs = ["amd/comgr/internal/opencl1.2-c.inc"],
)

opencl_pch(
    name = "opencl_2_0_pch_gen",
    cl_std = "2.0",
)

genrule(
    name = "opencl_2_0_inc_gen",
    tools = [":bc2h"],
    srcs = [":opencl_2_0_pch_gen"],
    cmd = "$(location :bc2h) $(SRCS) $(OUTS) opencl2_0_c",
    outs = ["amd/comgr/internal/opencl2.0-c.inc"],
)

ll_library(
    name = "amd_comgr",
    # The only externally visible entrypoint to this target is the generated
    # amd_comgr.h header.
    exposed_includes = ["$(GENERATED)/amd/comgr"],
    exposed_hdrs = [":amd_comgr_h_gen"],
    includes = [
        "amd/comgr/src",
        "$(GENERATED)/amd/comgr/internal",
        "$(GENERATED)/amd/comgr/amd_comgr",
    ],
    compile_flags = [
        "-std=c++17",
        "-O3",  # Usually inherits O2 from the llvm build. Let's just use O3.
        "-fno-rtti",
        "-Wall",
        "-Wno-attributes",
        "-fms-extensions",
        "-fvisibility=hidden",
        "-fno-strict-aliasing",
    ],
    hdrs = glob([
        "amd/comgr/src/*.h",
        "amd/comgr/src/time-stat/*.h",
        "amd/comgr/src/comgr-isa-metadata.def",
    ]) + [
        ":libraries_defs_inc_gen",
        ":libraries_inc_gen",
        ":opencl_1_2_inc_gen",
        ":opencl_2_0_inc_gen",
        ":device_lib_headers_gen",
    ],
    srcs = [
        "amd/comgr/src/comgr-compiler.cpp",
        "amd/comgr/src/comgr.cpp",
        "amd/comgr/src/comgr-device-libs.cpp",
        "amd/comgr/src/comgr-disassembly.cpp",
        "amd/comgr/src/comgr-elfdump.cpp",
        "amd/comgr/src/comgr-env.cpp",
        "amd/comgr/src/comgr-metadata.cpp",
        "amd/comgr/src/comgr-objdump.cpp",
        "amd/comgr/src/comgr-signal.cpp",
        "amd/comgr/src/comgr-symbol.cpp",
        "amd/comgr/src/comgr-symbolizer.cpp",
        "amd/comgr/src/time-stat/time-stat.cpp",
    ],
    depends_on_llvm = 1,
    defines = ["AMD_COMGR_BUILD"],
    visibility = ["//visibility:public"],
    emit = select({
        ":shared": ["shared_object"],
        "//conditions:default": ["archive"],
    }),
    shared_object_link_flags = select({
        ":shared": ["--no-undefined"],
        "//conditions:default": [],
    }),
)

# All artifacts from ROCm-Device-Libs are bitcode files. We need these to be in
# a directory "amdgcn/bitcode". The output layout should look like this:
#
#     amdgcn/bitcode/asanrtl.bc
#     amdgcn/bitcode/hip.bc
#     amdgcn/bitcode/oclc_<...>.bc
#     amdgcn/bitcode/ocml.bc
#     amdgcn/bitcode/opencl.bc
#
# Then we can make them available to clang via the --rocm-device-lib-path flag.
# None of the headers in this repository are exported to downstream targets.

ll_binary(
    name = "prepare-builtins",
    srcs = ["amd/device-libs/utils/prepare-builtins/prepare-builtins.cpp"],
    compile_flags = ["-std=c++17"],
    depends_on_llvm = 1,
)

OCLC_NAMES = [
    "abi_version_400",
    "abi_version_500",
    "correctly_rounded_sqrt_off",
    "correctly_rounded_sqrt_on",
    "daz_opt_off",
    "daz_opt_on",
    "finite_only_off",
    "finite_only_on",
    "isa_version_1010",
    "isa_version_1011",
    "isa_version_1012",
    "isa_version_1013",
    "isa_version_1030",
    "isa_version_1031",
    "isa_version_1032",
    "isa_version_1033",
    "isa_version_1034",
    "isa_version_1035",
    "isa_version_1036",
    "isa_version_1100",
    "isa_version_1101",
    "isa_version_1102",
    "isa_version_1103",
    "isa_version_1150",
    "isa_version_1151",
    "isa_version_600",
    "isa_version_601",
    "isa_version_602",
    "isa_version_700",
    "isa_version_701",
    "isa_version_702",
    "isa_version_703",
    "isa_version_704",
    "isa_version_705",
    "isa_version_801",
    "isa_version_802",
    "isa_version_803",
    "isa_version_805",
    "isa_version_810",
    "isa_version_900",
    "isa_version_902",
    "isa_version_904",
    "isa_version_906",
    "isa_version_908",
    "isa_version_909",
    "isa_version_90a",
    "isa_version_90c",
    "isa_version_940",
    "isa_version_941",
    "isa_version_942",
    "unsafe_math_off",
    "unsafe_math_on",
    "wavefrontsize64_off",
    "wavefrontsize64_on",
]

[
    opencl_bitcode_library(
        name = "oclc_{}".format(name),
        hdrs = ["amd/device-libs/oclc/inc/oclc.h"],
        srcs = ["amd/device-libs/oclc/src/{}.cl".format(name)],
    )
    for name in OCLC_NAMES
]

filegroup(
    name = "oclc",
    srcs = [":oclc_{}".format(name) for name in OCLC_NAMES],
)

opencl_bitcode_library(
    name = "ocml",
    hdrs = glob(["amd/device-libs/ocml/src/*.h"]) + [
        "amd/device-libs/ocml/inc/ocml.h",
        "amd/device-libs/irif/inc/irif.h",
        "amd/device-libs/oclc/inc/oclc.h",
    ],
    srcs = glob(["amd/device-libs/ocml/src/*.cl"]),
)

opencl_bitcode_library(
    name = "ockl",
    hdrs = glob(["amd/device-libs/ockl/inc/*.h"]) + [
        "amd/device-libs/oclc/inc/oclc.h",
        "amd/device-libs/irif/inc/irif.h",
        "amd/device-libs/ockl/src/ockl_priv.h",
    ],
    srcs = glob(["amd/device-libs/ockl/src/*.cl"]),
    bitcode_srcs = [
        "amd/device-libs/ockl/src/wgscratch.ll",
        "amd/device-libs/ockl/src/base-image-intrinsics.ll",
        "amd/device-libs/ockl/src/extended-image-intrinsics.ll",
        "amd/device-libs/ockl/src/buffer-intrinsics.ll",
    ],
)

opencl_bitcode_library(
    name = "opencl",
    hdrs = glob([
        "amd/device-libs/ockl/inc/*.h",
        "amd/device-libs/opencl/src/*/*.h",
    ]) + [
        "amd/device-libs/oclc/inc/oclc.h",
        "amd/device-libs/irif/inc/irif.h",
        "amd/device-libs/ocml/inc/ocml.h",
    ],
    srcs = glob(["amd/device-libs/opencl/src/*/*.cl"]),
)

opencl_bitcode_library(
    name = "hip",
    hdrs = [
        "amd/device-libs/ockl/inc/ockl.h",
        "amd/device-libs/irif/inc/irif.h",
    ],
    srcs = ["amd/device-libs/hip/src/empty.cl"],
)

opencl_bitcode_library(
    name = "asanrtl",
    hdrs = glob(["amd/device-libs/asanrtl/inc/*.h"]) + [
        "amd/device-libs/ockl/inc/ockl.h",
        "amd/device-libs/oclc/inc/oclc.h",
        "amd/device-libs/irif/inc/irif.h",
    ],
    srcs = glob(["amd/device-libs/asanrtl/src/*.cl"]),
)

filegroup(
    name = "rocm-device-libs",
    srcs = [
        ":asanrtl",
        ":ockl",
        ":hip",
        ":oclc",
        ":ocml",
        ":opencl",
    ],
    visibility = ["//visibility:public"],
)
