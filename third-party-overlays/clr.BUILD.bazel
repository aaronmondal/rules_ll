"Build file for clr."

load("@rules_ll//ll:defs.bzl", "ll_library")
load("@rules_ll//third-party-overlays:rocclr_config.bzl", "ROCCLR_DEFINES")

ll_library(
    name = "CL2.2",
    exposed_angled_includes = ["opencl/khronos/headers/opencl2.2"],
    exposed_hdrs = glob([
        "opencl/khronos/headers/opencl2.2/CL/*.h",
        "opencl/khronos/headers/opencl2.2/CL/*.hpp",
    ]),
    visibility = ["//visibility:public"],
)

ll_library(
    name = "CL2.1",
    exposed_angled_includes = ["opencl/khronos/headers/opencl2.1"],
    exposed_hdrs = glob([
        "opencl/khronos/headers/opencl2.1/CL/*.h",
        "opencl/khronos/headers/opencl2.1/CL/*.hpp",
    ]),
)

ll_library(
    name = "amdocl_headers",
    exposed_hdrs = glob(["opencl/amdocl/*.hpp", "opencl/amdocl/*.h"]),
    exposed_includes = [
        "opencl/amdocl",
        "opencl",
    ],
    visibility = ["//visibility:public"],
)

ll_library(
    name = "rocclr",
    exposed_hdrs = glob([
        "rocclr/device/**/*.hpp",
        "rocclr/device/**/*.h",
        "rocclr/elf/**/*.hpp",
        "rocclr/elf/elfio/*.hpp",
        "rocclr/include/**/*.hpp",
        "rocclr/include/**/*.h",
        "rocclr/utils/**/*.hpp",
        "rocclr/platform/**/*.hpp",
        "rocclr/platform/**/*.h",
        "rocclr/thread/**/*.hpp",
        "rocclr/os/**/*.hpp",
    ]),
    hdrs = glob([
        "rocclr/compiler/lib/**/*.hpp",
        "rocclr/compiler/lib/**/*.h",
    ]) + [
        "rocclr/compiler/lib/utils/OPTIONS.def",
    ],
    exposed_includes = [
        "rocclr/include",
    ],
    exposed_angled_includes = [
        "rocclr/elf",
        "rocclr",
    ],
    includes = [
        "rocclr/compiler/lib",
        "rocclr/compiler/lib/backends/common",
        "rocclr/device",
    ],
    srcs = [
        "rocclr/compiler/lib/utils/options.cpp",
        "rocclr/device/appprofile.cpp",
        "rocclr/device/blit.cpp",
        "rocclr/device/blitcl.cpp",
        "rocclr/device/comgrctx.cpp",
        "rocclr/device/devhcmessages.cpp",
        "rocclr/device/devhcprintf.cpp",
        "rocclr/device/devhostcall.cpp",
        "rocclr/device/device.cpp",
        "rocclr/device/devkernel.cpp",
        "rocclr/device/devprogram.cpp",
        "rocclr/device/devwavelimiter.cpp",
        "rocclr/device/hsailctx.cpp",
        "rocclr/elf/elf.cpp",
        "rocclr/os/alloc.cpp",
        "rocclr/os/os_posix.cpp",
        "rocclr/os/os_win32.cpp",
        "rocclr/os/os.cpp",
        "rocclr/platform/activity.cpp",
        "rocclr/platform/agent.cpp",
        "rocclr/platform/command.cpp",
        "rocclr/platform/commandqueue.cpp",
        "rocclr/platform/context.cpp",
        "rocclr/platform/kernel.cpp",
        "rocclr/platform/memory.cpp",
        "rocclr/platform/ndrange.cpp",
        "rocclr/platform/program.cpp",
        "rocclr/platform/runtime.cpp",
        "rocclr/platform/interop_gl.cpp",
        "rocclr/thread/monitor.cpp",
        "rocclr/thread/semaphore.cpp",
        "rocclr/thread/thread.cpp",
        "rocclr/utils/debug.cpp",
        "rocclr/utils/flags.cpp",

        # HSA sources.
        "rocclr/device/rocm/rocappprofile.cpp",
        "rocclr/device/rocm/rocblit.cpp",
        "rocclr/device/rocm/rocblitcl.cpp",
        "rocclr/device/rocm/roccounters.cpp",
        "rocclr/device/rocm/rocdevice.cpp",
        "rocclr/device/rocm/rocglinterop.cpp",
        "rocclr/device/rocm/rockernel.cpp",
        "rocclr/device/rocm/rocmemory.cpp",
        "rocclr/device/rocm/rocprintf.cpp",
        "rocclr/device/rocm/rocprogram.cpp",
        "rocclr/device/rocm/rocsettings.cpp",
        "rocclr/device/rocm/rocsignal.cpp",
        "rocclr/device/rocm/rocvirtual.cpp",
        "rocclr/device/rocm/rocurilocator.cpp",
    ],
    defines = ROCCLR_DEFINES,
    deps = [
        ":CL2.2",
        ":amdocl_headers",
        "@rocr//:libhsa-runtime64",
        "@rocr//:hsa_headers",
        "@comgr//:amd_comgr",
    ],
    compile_flags = [
        "-std=c++17",
        "-O3",  # In CMake decided by downstream targets. Let's just use O3.

        # TODO: Upstream fixes for these.
        "-Wno-inconsistent-missing-override",
        "-Wno-parentheses",  # This one looks like an actual bug.
    ],
    visibility = ["//visibility:public"],
)

# TODO: Everything below this point under (suspended) construction for now. This
# is not needed for hip but we probably want to support native OpenCL toolchains
# in rules_ll at some point to ease transitioning from OCL to HIP.

# buildifier: disable=no-effect
'''
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")

bool_flag(
    name = "shared_libamdocl64",
    build_setting_default = False,
)

config_setting(
    name = "shared",
    flag_values = {":shared_libamdocl64": "true"},
)


ll_library(
    name = "libamdocl64",
    # exposed_hdrs = glob(["amdocl/*.hpp", "amdocl/*.h"]),
    # exposed_includes = [
    #     "ROCm-OpenCL-Runtime/amdocl",
    #     "ROCm-OpenCL-Runtime",
    # ],
    srcs = [
        "amdocl/cl_command.cpp",
        "amdocl/cl_context.cpp",
        "amdocl/cl_counter.cpp",
        "amdocl/cl_d3d9.cpp",
        "amdocl/cl_d3d10.cpp",
        "amdocl/cl_d3d11.cpp",
        "amdocl/cl_device.cpp",
        "amdocl/cl_event.cpp",
        "amdocl/cl_execute.cpp",
        "amdocl/cl_gl.cpp",
        "amdocl/cl_icd.cpp",
        "amdocl/cl_kernel_info_amd.cpp",
        "amdocl/cl_memobj.cpp",
        "amdocl/cl_p2p_amd.cpp",
        "amdocl/cl_pipe.cpp",
        "amdocl/cl_platform_amd.cpp",
        "amdocl/cl_profile_amd.cpp",
        "amdocl/cl_program.cpp",
        "amdocl/cl_sampler.cpp",
        "amdocl/cl_sdi_amd.cpp",
        "amdocl/cl_svm.cpp",
        "amdocl/cl_thread_trace_amd.cpp",
    ],
    deps = [
        ":CL2.2",
        ":headers",
        "@rocr//:libhsa-runtime64",
        "@rocclr//:headers",
        "@rocclr//:rocclr",
    ],
    depends_on_llvm = 1,
    visibility = ["//visibility:public"],
    emit = select({
        ":shared": ["shared_object"],
        "//conditions:default": ["archive"],
    }),
    shared_object_link_flags = select({
        ":shared": [
            "--no-undefined",
            "-lnuma",  # For rocclr which we only distribute as archive.
        ],
        "//conditions:default": [],
    }) + select({
        "@rocr//:shared": [],
        "//conditions:default": [
            "-ldrm",
            "-ldrm_amdgpu",
            "-lelf",
        ],
    }),
)

# Testing Infrastructure

ll_library(
    name = "test_headers",
    exposed_includes = [
        "tests/ocltst/include",
    ],
    exposed_hdrs = glob(["tests/ocltst/include/**/*.h"]),
)

ll_library(
    name = "test_module_headers",
    exposed_includes = [
        "tests/ocltst/module/include",
    ],
    exposed_hdrs = glob(["tests/ocltst/module/include/*.h"]),
)

ll_library(
    name = "test_module_common",
    includes = [
        "tests/ocltst/module/include",
    ],
    hdrs = [
        "tests/ocltst/module/common/Timer.h",
        "tests/ocltst/module/common/OCLGLCommon.h",
    ],
    srcs = [
        "tests/ocltst/module/common/BaseTestImp.cpp",
        "tests/ocltst/module/common/OCLTestImp.cpp",
        "tests/ocltst/module/common/OCLTestListImp.cpp",
        "tests/ocltst/module/common/OCLTestUtils.cpp",
        "tests/ocltst/module/common/OCLThread.cpp",
        "tests/ocltst/module/common/OCLWrapper.cpp",
        "tests/ocltst/module/common/Timer.cpp",
    ],
    compile_flags = [
        "-std=c++20",
    ],
    deps = [
        ":test_headers",
        ":test_module_headers",
        ":CL2.2",
        ":libamdocl64",
        ":headers",
    ],
)

ll_binary(
    name = "ocltst",
    hdrs = glob(["tests/ocltst/env/*.h"]),
    compile_flags = ["-std=c++17"],
    srcs = [
        "tests/ocltst/env/oclTestLog.cpp",
        "tests/ocltst/env/oclsysinfo.cpp",
        "tests/ocltst/env/ocltst.cpp",
        "tests/ocltst/env/pfm.cpp",
        "tests/ocltst/env/Timer.cpp",
        "tests/ocltst/module/common/BaseTestImp.cpp",
        "tests/ocltst/module/common/OCLTestImp.cpp",
        "tests/ocltst/module/common/OCLThread.cpp",
        "tests/ocltst/module/common/OCLWrapper.cpp",
    ],
    deps = [
        ":test_headers",
        ":test_module_headers",
        ":CL2.2",
        ":libamdocl64",
        ":headers",
        # "//ROCclr:ROCclr",
    ],
    depends_on_llvm = 1,
    link_flags = [
        "-lrt",
        "-lnuma",
        "-lelf",
        "-ldrm",
        "-ldrm_amdgpu",
    ],
)
'''
