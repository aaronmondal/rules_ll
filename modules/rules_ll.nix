{ config, lib, pkgs, ... }:
let
  inherit (lib) mkOption types;

  inherit (pkgs) runCommand writeText git;

  processedActionEnvs = map (x: "build --@rules_ll//ll:" + x) config.Env;

  configFile = runCommand "ll.bazelrc" { } ''
    printf '# These flags are dynamically generated by rules_ll.
    #
    # Add try-import %%workspace%%/ll.bazelrc to your .bazelrc to
    # include these flags when running Bazel in a nix environment.

    ${lib.concatLines processedActionEnvs}' >$out
  '';
in
{
  options = {
    installationScript = mkOption {
      type = types.str;
      description = lib.mkDoc ''
        A bash snippet which creates an ll.bazelrc file in the repository.
      '';
    };
    Env = mkOption {
      type = types.listOf types.str;
      description = lib.mdDoc ''
        Environment variables for `--@rules_ll//ll:*` settings.

        For instance:

        ```nix
        Env = [
          "LL_CFLAGS=-I''${openssl.dev}/include"
        ]
        ```

        results in the following line in `ll.bazelrc`:

        ```bash
        build --@rules_ll//ll:LL_CFLAGS=-I''${openssl.dev}/include
        ```

        Supported values are:

        - `LL_CFLAGS`
        - `LL_LDLAGS`
        - `LL_DYNAMIC_LINKER`
        - `LL_AMD_INCLUDES`
        - `LL_AMD_LIBRARIES`
        - `LL_CUDA_TOOLKIT`
        - `LL_CUDA_DRIVER`

        Attempting to set any other value will result in Bazel errors.
      '';
      default = { };
    };
  };

  config = {
    installationScript = ''
      if ! type -t git >/dev/null; then
        # In pure shells
        echo 1>&2 "WARNING: rules_ll: git command not found; skipping installation."
      elif ! ${git}/bin/git rev-parse --git-dir &> /dev/null; then
        echo 1>&2 "WARNING: rules_ll: .git not found; skipping installation."
      else
        GIT_WC=`${git}/bin/git rev-parse --show-toplevel`

        # These update procedures compare before they write, to avoid
        # filesystem churn. This improves performance with watch tools like
        # lorri and prevents installation loops by lorri.

        if ! readlink "''${GIT_WC}/ll.bazelrc" >/dev/null \
          || [[ $(readlink "''${GIT_WC}/ll.bazelrc") != ${configFile} ]]; then
          echo 1>&2 "rules_ll: updating $PWD repository"
          [ -L ll.bazelrc ] && unlink ll.bazelrc

          if [ -e "''${GIT_WC}/ll.bazelrc" ]; then
            echo 1>&2 "rules_ll: WARNING: Refusing to install because of pre-existing ll.bazelrc"
            echo 1>&2 "  Remove the ll.bazelrc file and add ll.bazelrc to .gitignore."
          else
            ln -fs ${configFile} "''${GIT_WC}/ll.bazelrc"
          fi
        fi
      fi
    '';
  };
}
